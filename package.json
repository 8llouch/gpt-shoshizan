{
  "name": "gpt-shoshizan",
  "version": "0.1.0",
  "description": "GPT-SHOSHIZAN - Complete AI Chat Application with Microservices Architecture",
  "private": true,
  "workspaces": [
    "gpt-api",
    "gpt-kafka-consumer",
    "gpt-kafka-producer",
    "gpt-gateway",
    "gpt-ui",
    "shared-interfaces"
  ],
  "scripts": {
    "dev": "concurrently --kill-others --names \"GATEWAY,API,CONSUMER,PRODUCER,UI\" --prefix-colors \"red,blue,green,yellow,magenta\" \"npm run dev:gateway\" \"npm run dev:api\" \"npm run dev:consumer\" \"npm run dev:producer\" \"sleep 3 && npm run dev:ui\"",
    "dev:gateway": "npm run start:dev --workspace=gpt-gateway",
    "dev:ui": "npm run dev --workspace=gpt-ui",
    "debug": "concurrently --kill-others --names \"GATEWAY,API,CONSUMER,PRODUCER,UI\" --prefix-colors \"red,blue,green,yellow,magenta\" \"npm run debug:gateway\" \"npm run debug:api\" \"npm run debug:consumer\" \"npm run debug:producer\" \"sleep 3 && npm run dev:ui\"",
    "debug:gateway": "npm run start:debug --workspace=gpt-gateway",
    "debug:api": "npm run start:debug --workspace=gpt-api",
    "debug:consumer": "npm run start:debug --workspace=gpt-kafka-consumer",
    "debug:producer": "npm run start:debug --workspace=gpt-kafka-producer",
    "start": "npm run dev",
    "test:all": "npm run test --workspace=gpt-api && npm run test --workspace=gpt-kafka-consumer && npm run test --workspace=gpt-kafka-producer && npm run test --workspace=gpt-gateway",
    "test:cov:all": "npm run test:cov --workspace=gpt-api && npm run test:cov --workspace=gpt-kafka-consumer && npm run test:cov --workspace=gpt-kafka-producer && npm run test:cov --workspace=gpt-gateway && npm run test:unit:cov --workspace=gpt-ui",
    "test:cov:all:report": "npm run test:cov:all && node scripts/generate-coverage-report.js",
    "test:cov:backend": "npm run test:cov --workspace=gpt-api && npm run test:cov --workspace=gpt-kafka-consumer && npm run test:cov --workspace=gpt-kafka-producer && npm run test:cov --workspace=gpt-gateway",
    "test:cov:gateway": "npm run test:cov --workspace=gpt-gateway",
    "test:cov:api": "npm run test:cov --workspace=gpt-api",
    "test:cov:consumer": "npm run test:cov --workspace=gpt-kafka-consumer",
    "test:cov:producer": "npm run test:cov --workspace=gpt-kafka-producer",
    "test:cov:ui": "npm run test:unit:cov --workspace=gpt-ui",
    "test:gateway": "npm run test --workspace=gpt-gateway",
    "test:api": "npm run test --workspace=gpt-api",
    "test:consumer": "npm run test --workspace=gpt-kafka-consumer",
    "test:producer": "npm run test --workspace=gpt-kafka-producer",
    "test:ui": "npm run test:unit --workspace=gpt-ui",
    "lint:all": "npm run lint --workspace=gpt-api && npm run lint --workspace=gpt-kafka-consumer && npm run lint --workspace=gpt-kafka-producer && npm run lint --workspace=gpt-gateway && npm run lint --workspace=gpt-ui",
    "lint:gateway": "npm run lint --workspace=gpt-gateway",
    "lint:api": "npm run lint --workspace=gpt-api",
    "lint:consumer": "npm run lint --workspace=gpt-kafka-consumer",
    "lint:producer": "npm run lint --workspace=gpt-kafka-producer",
    "lint:ui": "npm run lint --workspace=gpt-ui",
    "format:all": "npm run format --workspace=gpt-api && npm run format --workspace=gpt-kafka-consumer && npm run format --workspace=gpt-kafka-producer && npm run format --workspace=gpt-gateway && npm run format --workspace=gpt-ui",
    "format:gateway": "npm run format --workspace=gpt-gateway",
    "format:api": "npm run format --workspace=gpt-api",
    "format:consumer": "npm run format --workspace=gpt-kafka-consumer",
    "format:producer": "npm run format --workspace=gpt-kafka-producer",
    "format:ui": "npm run format --workspace=gpt-ui",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:restart": "docker-compose restart",
    "docker:stop": "docker-compose stop",
    "docker:logs": "docker-compose logs -f",
    "docker:ps": "docker-compose ps",
    "docker:rebuild": "docker-compose down && docker-compose build && docker-compose up -d",
    "docker:rebuild:nocache": "docker-compose down && docker-compose build --no-cache && docker-compose up -d",
    "docker:clean": "docker-compose down -v --rmi all --remove-orphans",
    "docker:prune": "docker system prune -af --volumes",
    "docker:reset": "npm run docker:clean && npm run docker:prune && docker-compose up -d --build",
    "docker:ui:rebuild": "docker-compose build gpt-ui && docker-compose up -d gpt-ui",
    "docker:gateway:rebuild": "docker-compose build gpt-gateway && docker-compose up -d gpt-gateway",
    "docker:api:rebuild": "docker-compose build gpt-api && docker-compose up -d gpt-api",
    "docker:logs:ui": "docker-compose logs -f gpt-ui",
    "docker:logs:gateway": "docker-compose logs -f gpt-gateway",
    "docker:logs:api": "docker-compose logs -f gpt-api",
    "docker:logs:ollama": "docker-compose logs -f ollama",
    "observability:start": "docker-compose up -d otel-collector jaeger prometheus grafana",
    "observability:stop": "docker-compose stop otel-collector jaeger prometheus grafana",
    "observability:restart": "npm run observability:stop && npm run observability:start",
    "observability:logs": "docker-compose logs -f otel-collector jaeger prometheus grafana",
    "observability:logs:otel": "docker logs -f gpt-otel-collector",
    "observability:logs:jaeger": "docker logs -f gpt-jaeger",
    "observability:logs:prometheus": "docker logs -f gpt-prometheus",
    "observability:logs:grafana": "docker logs -f gpt-grafana",
    "observability:clean": "docker-compose down otel-collector jaeger prometheus grafana && docker volume rm gpt-shoshizan_prometheus_data gpt-shoshizan_grafana_data 2>/dev/null || true",
    "observability:open:jaeger": "open http://localhost:16686",
    "observability:open:prometheus": "open http://localhost:9090",
    "observability:open:grafana": "open http://localhost:3100"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "jsdom": "^26.1.0",
    "rimraf": "^5.0.5"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "keywords": [
    "gpt",
    "chat",
    "ai",
    "microservices",
    "nestjs",
    "vue",
    "kafka",
    "typescript"
  ],
  "author": "8llouch - shoshizan",
  "license": "UNLICENSED"
}
